#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app         = require('../app');
var debug       = require('debug')('myapp:server');
var http        = require('http');
var websocket   = require('ws');
var uuid        = require('uuid');
let db          = require('../mysql');
const { text } = require('express');
const { check } = require('express-validator');


const wsServer  = new websocket.Server({noServer: true});
wsServer.on('connection', function(socket) {
    socket.on('message', message => console.log(message));
})

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server. and websocket
 */

var server    = http.createServer(app);
var socket    = new websocket.Server({server: server, path: '/users'});
var clients   = {};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '192.168.1.8');
server.on('error', onError);
server.on('listening', onListening);

socket.on('connection', (ws, req) => {
    let urls = new URLSearchParams(req.url.substring(req.url.indexOf('?')));
    let code = urls.get('from');

    if(!clients[code]) {
        clients[code]   = ws;
    }

    ws.on('message', (message, isBinary) => {
        // ws.send()
        let target  = urls.get('target');
        let from    = urls.get('from');
        let pesan   = isBinary ? message : message.toString();
        let format  = {
            status: false,
            text: pesan,
            user: '',
            datetime: Date.now()
        };

        for(let key in clients) {
            if(key === target) {
                //Handle Target
                format.status   = true;
                format.user     = from;
                clients[key].send(JSON.stringify(format));

                let querys = "INSERT INTO tb_chat (`from`, `to`, `message`) VALUES ('"+from+"', '"+target+"', '"+pesan+"')";
                db.query(querys);
            }

            if(key === from) {
                //Handle Target
                format.status   = true;
                format.user     = from;
                clients[key].send(JSON.stringify(format));
            }
        }

        if(!format.status) {
            format.status   = false;
            format.text     = 'Users is offline';
            ws.send(JSON.stringify(format));
        }
    });
});

// server.on('upgrade', (request, socket, head) => {
//   wsServer.handleUpgrade(request, socket, Buffer.alloc(0), onSocketConnect)
// });

// function onSocketConnect (ws, request) {
//     ws.on('message', function(message) {
//         ws.send('hello world');
//     });
// }
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
