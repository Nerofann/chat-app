#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app         = require('../app');
var debug       = require('debug')('myapp:server');
var http        = require('http');
var websocket   = require('ws');
var uuid        = require('uuid');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(function(req, res, next) {
  console.log(req.url);
});

/**
 * Create HTTP server. and websocket
 */

var server    = http.createServer(app);
var socket    = new websocket.Server({server: server, path: '/users'});
var clients   = {};

socket.on('connection', function(ws, req) {
  let client_id = req.headers['sec-websocket-key'];
  clients[client_id] = ws;

  console.log(app.session);
 });

socket.on('close', function(ws, req) {
  ws.send('Closed: ');
  clients.delete(ws);
 
  // console.log(clients.size);
});

function broadcast(msg = '') {
  for(let cl of Object.keys(clients)){
    clients[cl].send(msg);
  }

  return true;
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
